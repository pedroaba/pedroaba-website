datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EntityState {
  ACTIVE
  DELETED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ACTIVE)

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  state EntityState @default(ACTIVE)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  state EntityState @default(ACTIVE)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  state EntityState @default(ACTIVE)

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  state EntityState @default(ACTIVE)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ACTIVE)

  @@map("organizations")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  POTENTIAL
  ARCHIVED
}

model Client {
  id      String  @id @default(cuid())
  name    String
  email   String?
  phone   String?
  company String?
  website String?
  address String?
  notes   String?

  status ClientStatus @default(ACTIVE)

  taxId   String? @map("tax_id") // CNPJ/CPF (Brazilian company/individual tax ID)
  taxName String? @map("tax_name") // Corporate name

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ACTIVE)

  @@map("clients")
}

enum ProjectStatus {
  BACKLOG
  PLANNING
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  status ProjectStatus @default(BACKLOG)

  budget     Decimal? @default(0) @db.Decimal(10, 2) // Initial budget
  hourlyRate Decimal? @default(20.00) @map("hourly_rate") @db.Decimal(10, 2) // Hourly rate
  totalHours Decimal? @default(0) @map("total_hours") @db.Decimal(8, 2) // Total hours worked
  totalValue Decimal? @default(0) @map("total_value") @db.Decimal(10, 2) // Total project value

  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  dueDate   DateTime? @map("due_date")

  repository String? // Repository link
  liveUrl    String? @map("live_url") // Project production URL
  figmaUrl   String? @map("figma_url") // Figma link

  technologies String[]

  clientId String @map("client_id")
  client   Client @relation(fields: [clientId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state EntityState @default(ACTIVE)

  @@map("projects")
}
